#! /bin/sh
#
# Builds and installs zlib for the cross toolchain.

# Include our common functions
. /usr/lib/crossbuild/crossbuild.subr

# envvar ZLIB_URL
#
# Specifies the URL of the zlib source tarball you want to use.
export ZLIB_URL="https://zlib.net/zlib-1.2.11.tar.gz"

# zlib uses old autoconf and therefore does not know about our cross compilation
# environment. We therefore need to let our cross toolchain override native build
# components in $PATH.
export PATH=/usr/${HOST_TRIPLET}/bin:${PATH}

echo "*************************************************************************"
echo "--- BEGIN: crossbuild_zlib ---"

get_tarball zlib "${ZLIB_URL}" gz

cd ${SRC_ROOT_DIR}/zlib/*

if [ -f win32/Makefile.gcc ]; then
	echo "Running zlib's ./configure to trick it into making us a zlib.pc"
	./configure --prefix=/usr/${HOST_TRIPLET}

	make -f win32/Makefile.gcc clean
	make -f win32/Makefile.gcc
	ranlib *.a

	echo "Installing *.exe"
	install *.exe   /usr/${HOST_TRIPLET}/bin/

	echo "Installing *.dll"
	install *.dll   /usr/${HOST_TRIPLET}/bin/

#	echo "Installing *.lib"
#	cp *.lib   /usr/${HOST_TRIPLET}/lib

	echo "Installing *.a"
	install *.a    /usr/${HOST_TRIPLET}/lib/

	echo "Installing *.h"
	install *.h     /usr/${HOST_TRIPLET}/include/
	
	echo "Installing zlib.pc"
	install -D zlib.pc /usr/${HOST_TRIPLET}/lib/pkgconfig/zlib.pc
else
	echo "crossbuild_zlib failed: Could not find Makefile (is the zlib source tarball sane?)"
	exit 1
fi

echo "--- END: crossbuild_zlib ---"
echo "*************************************************************************"
